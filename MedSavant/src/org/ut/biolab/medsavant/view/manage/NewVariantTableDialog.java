/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewProjectDialog.java
 *
 * Created on Sep 19, 2011, 12:29:03 PM
 */
package org.ut.biolab.medsavant.view.manage;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import org.ut.biolab.medsavant.controller.ProjectController;
import org.ut.biolab.medsavant.controller.ReferenceController;
import org.ut.biolab.medsavant.db.util.DBSettings;
import org.ut.biolab.medsavant.db.util.query.ReferenceQueryUtil;
import org.ut.biolab.medsavant.listener.ReferenceListener;
import org.ut.biolab.medsavant.view.MainFrame;

/**
 *
 * @author mfiume
 */
public class NewVariantTableDialog extends javax.swing.JDialog implements ReferenceListener {
    private Map<Integer, String> refIdToNameMap;
    private final int projectid;

    /** Creates new form NewProjectDialog */
    public NewVariantTableDialog(int projectid, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Create variant table for reference");
        initComponents();
        this.projectid = projectid;
        initForm(projectid);
        this.getRootPane().setDefaultButton(this.button_ok);
        this.setLocationRelativeTo(parent);
        ReferenceController.getInstance().addReferenceListener(this);
    }
    
    public void setCancellable(boolean b) {
        this.button_cancel.setEnabled(b);
        if (!b) {
            this.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        } else {
            this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        button_cancel = new javax.swing.JButton();
        button_ok = new javax.swing.JButton();
        cb_references = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        label_projectname = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Project: ");

        button_cancel.setText("Cancel");
        button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_cancelActionPerformed(evt);
            }
        });

        button_ok.setText("OK");
        button_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_okActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Reference: ");

        label_projectname.setText("projName");

        jButton1.setText("New Reference");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(label_projectname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .add(cb_references, 0, 169, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(button_ok)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(button_cancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(label_projectname))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cb_references, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(button_cancel)
                    .add(button_ok))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_cancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_button_cancelActionPerformed

    private void button_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_okActionPerformed
        try {
            String refName = (String) this.cb_references.getSelectedItem();
            
            int refid = ReferenceQueryUtil.getReferenceId(refName);
            org.ut.biolab.medsavant.db.util.query.ProjectQueryUtil.createVariantTable(projectid,refid);
            this.dispose();
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_button_okActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NewReferenceDialog d = new NewReferenceDialog(MainFrame.getInstance(),true);
        d.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewVariantTableDialog dialog = new NewVariantTableDialog(1,new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_cancel;
    private javax.swing.JButton button_ok;
    private javax.swing.JComboBox cb_references;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel label_projectname;
    // End of variables declaration//GEN-END:variables

    private void initForm(int projectid) {
        try {
            String name = ProjectController.getInstance().getProjectName(projectid);
            this.label_projectname.setText(name);
        } catch (SQLException ex) {
            ex.printStackTrace();
            this.dispose();
        }
        
        refreshReferenceList();

    }

    public void referenceAdded(String name) {
        refreshReferenceList();
    }

    public void referenceRemoved(String name) {
        refreshReferenceList();
    }

    public void referenceChanged(String prnameojectName) {
    }

    private void refreshReferenceList() {
        try {
            cb_references.removeAllItems();
            
            refIdToNameMap = ReferenceQueryUtil.getReferencesWithoutTablesInProject(projectid);
                
                //if (refIdToNameMap.isEmpty()) {
                //    JOptionPane.showMessageDialog(MainFrame.getInstance(), "Variant tables exist for all references.", "", JOptionPane.INFORMATION_MESSAGE);
                //    this.dispose();
                //} else {
                    for (Integer i : refIdToNameMap.keySet()) {
                        this.cb_references.addItem(refIdToNameMap.get(i));
                    }
                //}
        } catch (SQLException ex) {
            this.dispose();
            ex.printStackTrace();
            Logger.getLogger(NewVariantTableDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void setVisible(boolean b) {
        if (b) {
            try {
                if (ReferenceQueryUtil.getReferencesWithoutTablesInProject(projectid).isEmpty()) {
                    JOptionPane.showMessageDialog(MainFrame.getInstance(), "Variant tables exist for all references.", "", JOptionPane.INFORMATION_MESSAGE);
                    super.setVisible(false);
                } else {
                    super.setVisible(true);
                }
            } catch (SQLException ex) {
                super.setVisible(false);
                ex.printStackTrace();
            }
        } else {
            super.setVisible(false);
        }
    }
}
